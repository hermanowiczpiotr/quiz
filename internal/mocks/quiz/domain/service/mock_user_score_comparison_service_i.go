// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	dto "quiz/internal/application/dto"

	mock "github.com/stretchr/testify/mock"
)

// MockUserScoreComparisonServiceI is an autogenerated mock type for the UserScoreComparisonServiceI type
type MockUserScoreComparisonServiceI struct {
	mock.Mock
}

type MockUserScoreComparisonServiceI_Expecter struct {
	mock *mock.Mock
}

func (_m *MockUserScoreComparisonServiceI) EXPECT() *MockUserScoreComparisonServiceI_Expecter {
	return &MockUserScoreComparisonServiceI_Expecter{mock: &_m.Mock}
}

// CalculateScore provides a mock function with given fields: username
func (_m *MockUserScoreComparisonServiceI) CalculateScore(username string) (dto.UserStats, error) {
	ret := _m.Called(username)

	if len(ret) == 0 {
		panic("no return value specified for CalculateScore")
	}

	var r0 dto.UserStats
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (dto.UserStats, error)); ok {
		return rf(username)
	}
	if rf, ok := ret.Get(0).(func(string) dto.UserStats); ok {
		r0 = rf(username)
	} else {
		r0 = ret.Get(0).(dto.UserStats)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(username)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUserScoreComparisonServiceI_CalculateScore_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CalculateScore'
type MockUserScoreComparisonServiceI_CalculateScore_Call struct {
	*mock.Call
}

// CalculateScore is a helper method to define mock.On call
//   - username string
func (_e *MockUserScoreComparisonServiceI_Expecter) CalculateScore(username interface{}) *MockUserScoreComparisonServiceI_CalculateScore_Call {
	return &MockUserScoreComparisonServiceI_CalculateScore_Call{Call: _e.mock.On("CalculateScore", username)}
}

func (_c *MockUserScoreComparisonServiceI_CalculateScore_Call) Run(run func(username string)) *MockUserScoreComparisonServiceI_CalculateScore_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockUserScoreComparisonServiceI_CalculateScore_Call) Return(_a0 dto.UserStats, _a1 error) *MockUserScoreComparisonServiceI_CalculateScore_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUserScoreComparisonServiceI_CalculateScore_Call) RunAndReturn(run func(string) (dto.UserStats, error)) *MockUserScoreComparisonServiceI_CalculateScore_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockUserScoreComparisonServiceI creates a new instance of MockUserScoreComparisonServiceI. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockUserScoreComparisonServiceI(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockUserScoreComparisonServiceI {
	mock := &MockUserScoreComparisonServiceI{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
