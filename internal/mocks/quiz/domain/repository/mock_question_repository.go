// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	entity "quiz/internal/domain/entity"

	mock "github.com/stretchr/testify/mock"
)

// MockQuestionRepository is an autogenerated mock type for the QuestionRepository type
type MockQuestionRepository struct {
	mock.Mock
}

type MockQuestionRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockQuestionRepository) EXPECT() *MockQuestionRepository_Expecter {
	return &MockQuestionRepository_Expecter{mock: &_m.Mock}
}

// FindAll provides a mock function with given fields:
func (_m *MockQuestionRepository) FindAll() []entity.Question {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for FindAll")
	}

	var r0 []entity.Question
	if rf, ok := ret.Get(0).(func() []entity.Question); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.Question)
		}
	}

	return r0
}

// MockQuestionRepository_FindAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindAll'
type MockQuestionRepository_FindAll_Call struct {
	*mock.Call
}

// FindAll is a helper method to define mock.On call
func (_e *MockQuestionRepository_Expecter) FindAll() *MockQuestionRepository_FindAll_Call {
	return &MockQuestionRepository_FindAll_Call{Call: _e.mock.On("FindAll")}
}

func (_c *MockQuestionRepository_FindAll_Call) Run(run func()) *MockQuestionRepository_FindAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockQuestionRepository_FindAll_Call) Return(_a0 []entity.Question) *MockQuestionRepository_FindAll_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockQuestionRepository_FindAll_Call) RunAndReturn(run func() []entity.Question) *MockQuestionRepository_FindAll_Call {
	_c.Call.Return(run)
	return _c
}

// GetByID provides a mock function with given fields: ID
func (_m *MockQuestionRepository) GetByID(ID int) (entity.Question, error) {
	ret := _m.Called(ID)

	if len(ret) == 0 {
		panic("no return value specified for GetByID")
	}

	var r0 entity.Question
	var r1 error
	if rf, ok := ret.Get(0).(func(int) (entity.Question, error)); ok {
		return rf(ID)
	}
	if rf, ok := ret.Get(0).(func(int) entity.Question); ok {
		r0 = rf(ID)
	} else {
		r0 = ret.Get(0).(entity.Question)
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(ID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockQuestionRepository_GetByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByID'
type MockQuestionRepository_GetByID_Call struct {
	*mock.Call
}

// GetByID is a helper method to define mock.On call
//   - ID int
func (_e *MockQuestionRepository_Expecter) GetByID(ID interface{}) *MockQuestionRepository_GetByID_Call {
	return &MockQuestionRepository_GetByID_Call{Call: _e.mock.On("GetByID", ID)}
}

func (_c *MockQuestionRepository_GetByID_Call) Run(run func(ID int)) *MockQuestionRepository_GetByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int))
	})
	return _c
}

func (_c *MockQuestionRepository_GetByID_Call) Return(_a0 entity.Question, _a1 error) *MockQuestionRepository_GetByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockQuestionRepository_GetByID_Call) RunAndReturn(run func(int) (entity.Question, error)) *MockQuestionRepository_GetByID_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockQuestionRepository creates a new instance of MockQuestionRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockQuestionRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockQuestionRepository {
	mock := &MockQuestionRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
